import { Component } from 'react';
import { renderAndAddProps } from 'render-and-add-props';
import SoundFontPlayer from 'soundfont-player';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const getAudioContext = () => {
    const AudioContext = window.AudioContext ||
        window.webkitAudioContext ||
        false;
    if (!AudioContext) {
        console.warn("Sorry but the WebAudio API is not supported on this browser. Please consider using Chrome or Safari for the best experience ");
        return {};
    }
    return new AudioContext();
};
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
class ReactSoundFontPlayer extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            instrument: null,
            audioContext: getAudioContext(),
            isLoading: true,
            playNoteIn: null,
            playNoteFor: null
        };
    }
    shouldComponentUpdate(nextProps) {
        return this.props.name !== nextProps.name;
    }
    componentDidMount() {
        return __awaiter(this, void 0, void 0, function* () {
            const ac = getAudioContext();
            const instrument = yield SoundFontPlayer.instrument(ac, this.props.name);
            const playNoteFor = (noteName, duration) => __awaiter(this, void 0, void 0, function* () {
                instrument.play(noteName).stop(ac.currentTime + duration / 1000);
                yield delay(duration);
            });
            const playNoteIn = (noteName, when, duration = 1000) => __awaiter(this, void 0, void 0, function* () {
                instrument
                    .play(noteName, ac.currentTime + when / 1000)
                    .stop(ac.currentTime + duration / 1000);
                yield delay(duration);
                yield delay(when);
            });
            this.setState(s => (Object.assign({}, s, { instrument, isLoading: false, playNoteFor,
                playNoteIn })));
        });
    }
    render() {
        const { isLoading } = this.state;
        return isLoading
            ? this.props.renderLoading()
            : renderAndAddProps(this.props.children, this.state);
    }
}
ReactSoundFontPlayer.defaultProps = {
    name: "acoustic_grand_piano",
    renderLoading: () => "Loading..."
};

export default ReactSoundFontPlayer;
export { getAudioContext, ReactSoundFontPlayer };
